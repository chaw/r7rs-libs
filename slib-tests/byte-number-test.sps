;; Tests for byte-number taken from byte-number comments

(import (scheme base)
        (scheme inexact)
        (slib byte)
        (slib byte-number)
        (srfi 64)
        (robin srfi64-utils))

(test-begin "slib-byte-number")

(test-equal 15 (bytes->integer (bytes   0   0   0  15) -4))
(test-equal 15 (bytes->integer (bytes   0   0   0  15) 4))
(test-equal -1 (bytes->integer (bytes 255 255 255 255) -4))
(test-equal 4294967295 (bytes->integer (bytes 255 255 255 255)  4))
(test-equal -2147483648 (bytes->integer (bytes 128   0   0   0) -4))
(test-equal 2147483648 (bytes->integer (bytes 128   0   0   0)  4))

(test-equal '(0 0 0 15) (bytes->list (integer->bytes          15 -4)))
(test-equal '(0 0 0 15) (bytes->list (integer->bytes          15 4)))
(test-equal '(255 255 255 255) (bytes->list (integer->bytes          -1 -4)))
(test-equal '(255 255 255 255) (bytes->list (integer->bytes  4294967295  4)))
(test-equal '(128 0 0 0) (bytes->list (integer->bytes -2147483648 -4)))
(test-equal '(128 0 0 0) (bytes->list (integer->bytes 2147483648 4)))

(test-approx-same 0.0 (bytes->ieee-float (bytes    0    0 0 0)))
(test-approx-same -0.0 (bytes->ieee-float (bytes #x80    0 0 0)))
(test-approx-same 2.0 (bytes->ieee-float (bytes #x40    0 0 0)))
(test-approx-same 6.5 (bytes->ieee-float (bytes #x40 #xd0 0 0)))
(test-approx-same -6.5 (bytes->ieee-float (bytes #xc0 #xd0 0 0)))
;(test-approx-same 11.754943508222875e-39 (bytes->ieee-float (bytes    0 #x80 0 0)) 1e-42)
;(test-approx-same 5.877471754111437e-39 (bytes->ieee-float (bytes    0 #x40 0 0)) 1e-42)
;(test-approx-same 1.401298464324817e-45 (bytes->ieee-float (bytes    0    0 0 1)) 1e-48)
(test-assert (infinite? (bytes->ieee-float (bytes #xff #x80 0 0))))
(test-assert (infinite? (bytes->ieee-float (bytes #x7f #x80 0 0))))
(test-assert (nan? (bytes->ieee-float (bytes #x7f #x80 0 1))))
(test-assert (nan? (bytes->ieee-float (bytes #x7f #xc0 0 0))))

(test-equal 0.0 (bytes->ieee-double (bytes    0    0 0 0 0 0 0 0)))
;(test-equal -0.0 (bytes->ieee-double (bytes #x80    0 0 0 0 0 0 0)))
(test-approx-same 2.0 (bytes->ieee-double (bytes #x40    0 0 0 0 0 0 0)))
(test-approx-same 6.5 (bytes->ieee-double (bytes #x40 #x1A 0 0 0 0 0 0)))
(test-approx-same -6.5 (bytes->ieee-double (bytes #xC0 #x1A 0 0 0 0 0 0)))
;(test-approx-same 11.125369292536006e-309 (bytes->ieee-double (bytes 0 8 0 0 0 0 0 0)) 1e-312)
;(test-approx-same 5.562684646268003e-309 (bytes->ieee-double (bytes 0 4 0 0 0 0 0 0)) 1e-312)
;(test-approx-same 4.0e-324 (bytes->ieee-double (bytes 0 0 0 0 0 0 0 1)) 1) ;; TODO: Fails with 4.9e-324
;;(if (infinite? (bytes->ieee-double (list->bytes '(127 239 255 255 255 255 255 255)))) ;; Larceny fails cannot convert +inf.0
;;  (test-approx-same 179.76931348623157e306 (bytes->ieee-double (list->bytes '(127 239 255 255 255 255 255 255))) 1e309)
;;  (test-assert #t))
(test-assert (infinite? (bytes->ieee-double (bytes #xFF #xF0 0 0 0 0 0 0))))
(test-assert (infinite? (bytes->ieee-double (bytes #x7F #xF0 0 0 0 0 0 0))))
(test-assert (nan? (bytes->ieee-double (bytes #x7F #xF8 0 0 0 0 0 0))))

(test-equal '(0     0 0 0) (bytes->list (ieee-float->bytes  0.0)))
(test-equal '(128   0 0 0) (bytes->list (ieee-float->bytes -0.0)))
(test-equal '(64    0 0 0) (bytes->list (ieee-float->bytes  2.0)))
(test-equal '(64  208 0 0) (bytes->list (ieee-float->bytes  6.5)))
(test-equal '(192 208 0 0) (bytes->list (ieee-float->bytes -6.5)))
;(test-equal '(  0 128 0 0) (bytes->list (ieee-float->bytes 11.754943508222875e-39)))
(test-equal '(  0  64 0 0) (bytes->list (ieee-float->bytes  5.877471754111438e-39)))
;(test-equal '(  0   0 0 1) (bytes->list (ieee-float->bytes  1.401298464324817e-45)))
;(test-equal '(255 128 0 0) (bytes->list (ieee-float->bytes -inf.0))) ;; Larceny gives (255 192 0 0)
;(test-equal '(127 128 0 0) (bytes->list (ieee-float->bytes +inf.0))) ;; Larceny gives (255 192 0 0)
;(test-equal '(127 192 0 0) (bytes->list (ieee-float->bytes  +nan.0)))

(test-equal (bytes->list (ieee-double->bytes  0.0)) '(0     0 0 0 0 0 0 0))
(test-equal (bytes->list (ieee-double->bytes -0.0)) '(128   0 0 0 0 0 0 0))
(test-equal (bytes->list (ieee-double->bytes  2.0)) '(64    0 0 0 0 0 0 0))
(test-equal (bytes->list (ieee-double->bytes  6.5)) '(64   26 0 0 0 0 0 0))
(test-equal (bytes->list (ieee-double->bytes -6.5)) '(192  26 0 0 0 0 0 0))
;(test-equal (bytes->list (ieee-double->bytes 11.125369292536006e-309)) '(  0   8 0 0 0 0 0 0))
;(test-equal (bytes->list (ieee-double->bytes  5.562684646268003e-309)) '(  0   4 0 0 0 0 0 0))
;(test-equal (bytes->list (ieee-double->bytes  4.0e-324)) '(  0   0 0 0 0 0 0 1))
(test-equal (bytes->list (ieee-double->bytes -inf.0)) '(255 240 0 0 0 0 0 0))
(test-equal (bytes->list (ieee-double->bytes +inf.0)) '(127 240 0 0 0 0 0 0))
(test-equal (bytes->list (ieee-double->bytes  +nan.0)) '(127 248 0 0 0 0 0 0))

(test-end)

